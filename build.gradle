apply plugin: 'idea'
apply plugin: 'kotlin'
apply plugin: 'application'


repositories {
    jcenter()
}

buildscript {
    ext.kotlin_version = '1.2.41'
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

def dllDirectory = 'build/dll'

dependencies {
    // Fetch the framework jar file
    compile 'org.rlbot.commons:framework:0.0.5'

    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile group: 'com.intellij', name: 'forms_rt', version: '7.0.3'
    compile group: 'org.ode4j', name: 'core', version: '0.3.1'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.1'
    compile 'com.google.guava:guava:23.4-jre'

    // This directory will be created and the interface dll copied into it at runtime.
    // The end result is that the interface dll will be on the classpath.
    runtime files(dllDirectory)

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.jfree', name: 'jfreechart', version: '1.5.0'
}

mainClassName = 'tarehart.rlbot.ReliefBotMainKt'

// You can run gradew distZip to generate a zip file suitable for tournament submissions
distZip {
    into ('README') {
        from 'README_Tournament.md'
        from fileTree('src/main/python') {
            exclude '__pycache__'
        }
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

task checkPipUpgradeSafety {
    doLast {
        new ByteArrayOutputStream().withStream { os ->
            def exitValue = exec {
                commandLine "python", "-c", "from rlbot.utils import public_utils; print(public_utils.is_safe_to_upgrade());"
                standardOutput = os
                ignoreExitValue = true
            }.exitValue

            // If the exit value is nonzero, the command  probably failed because rlbot is not installed at all.
            ext.isSafe = exitValue != 0 || os.toString().trim() == "True"
        }
    }
}


// Uses pip (the python package manager) to install all the python packages needed for this bot, as defined
// in requirements.txt.
task pipInstallRequirements {
    dependsOn 'checkPipUpgradeSafety'

    doLast {
        if (checkPipUpgradeSafety.isSafe) {
            exec {
                commandLine "python", "-m", "pip", "install", "-r", "requirements.txt", "--upgrade"
            }
        } else {
            println 'Skipping upgrade attempt because files are in use.'
        }
    }
}

task createDllDirectory {
    mkdir dllDirectory
}

// Installs or updates RLBot. Empty task for now. It still does stuff because it "dependsOn" tasks that do things.
task updateRLBot {
    dependsOn 'pipInstallRequirements'
    dependsOn 'createDllDirectory'
}
